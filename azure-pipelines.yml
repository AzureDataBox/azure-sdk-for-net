# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- none

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Build'
  ShouldPublish: false
  DotNetCoreSDKVersion: '2.2.202'
  skipComponentGovernanceDetection: true
  msBuildLogDir: msbuildlogs
  loggingArgs: '/clp:ShowtimeStamp /flp:LogFile=$(msBuildLogDir)/msbuild.normal.log;Verbosity=normal /flp1:Summary;Verbosity=minimal;LogFile=$(msBuildLogDir)/msbuild.sum.log /flp2:warningsonly;logfile=$(msBuildLogDir)/msbuild.wrn.log /flp3:errorsonly;logfile=$(msBuildLogDir)/msbuild.err.log'
  RPScopeArgs: '/p:PullRequestNumber=$(system.pullrequest.pullrequestnumber) /p:RepoHtmlUrl=https://github.com/$(build.repository.id) /p:CIBuildId=$(OfficialBuildId)'
  timeoutInMinutes: 120

steps:
- checkout: self
  persistCredentials: true
  clean: true

- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '$(projectPath)'

# Currently doesn't take the fix to autorest.csharp
# - task: DotNetCoreCLI@2
#   inputs:
#     command: 'build'
#     projects: '$(projectPath)'
#     arguments: '/t:GenerateCode'

- task: CmdLine@2
  inputs:
    script: 'npx autorest@https://github.com/Azure/autorest/releases/download/autorest-3.0.6222/autorest-3.0.6222.tgz --version=3.0.6282 d:\a\1\s\sdk\databox\Azure.Management.DataBox\src\autorest.md  --use=https://github.com/Azure/autorest.csharp/releases/download/3.0.0-dev.20200622.3/autorest-csharp-v3-3.0.0-dev.20200622.3.tgz --output-folder=d:\a\1\s\sdk\databox\Azure.Management.DataBox\src --title=Azure.Management.DataBox --namespace=Azure.Management.DataBox --shared-source-folder=d:\a\1\s\eng\../sdk/core/Azure.Core/src/Shared/'
    
- task: DotNetCoreCLI@2
  displayName: Build
  inputs:
    command: 'build'
    projects: '$(projectPath)'
    
- task: CopyFiles@2
  inputs:
    SourceFolder: '$(Build.SourcesDirectory)'
    Contents: 'artifacts/**'
    TargetFolder: '$(Build.ArtifactStagingDirectory)'    

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'dll'
    publishLocation: 'Container'

- task: CmdLine@2
  inputs:
    script: |
      git config --global user.email "$(emailId)"
      git config --global user.name "$(username)"

      echo GIT CHECKOUT
      git checkout master
      echo GIT STATUS
      git status
      echo GIT ADD
      git add .
      echo GIT STATUS
      git status
      echo GIT COMMIT
      git commit -m "$(commitMsg)"
      echo GIT PUSH
      git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" push origin master    

- task: UseDotNet@2
  displayName: "Use .NET Core sdk $(DotNetCoreSDKVersion)"
  inputs:
    version: "$(DotNetCoreSDKVersion)"
#- script: "echo $(system.pullrequest.pullrequestnumber), https://github.com/$(build.repository.id), https://github.com/$(build.repository.ID)"
- script: |
    dotnet msbuild mgmt.proj /v:m /t:CreateNugetPackage /p:Configuration=$(BuildConfiguration) /p:PackageOutputPath=$(Build.ArtifactStagingDirectory) /p:Scope=$(scope) $(loggingArgs) $(RPScopeArgs)"
  displayName: "Build & Package"
  env:
    DOTNET_SKIP_FIRST_TIME_EXPERIENCE: 1
    DOTNET_CLI_TELEMETRY_OPTOUT: 1
    DOTNET_MULTILEVEL_LOOKUP: 0
- task: PublishBuildArtifacts@1
  condition: succeededOrFailed()
  inputs:
    pathtoPublish: $(msBuildLogDir)
    artifactName: MsBuildLogs
- task: PublishPipelineArtifact@0
  condition: succeeded()
  inputs:
    artifactName: packages
    targetPath: $(Build.ArtifactStagingDirectory)
- pwsh: |
    $releaseTag = "FOR_SIGNING"
    if ("$(ShouldPublish)" -eq "true") { $releaseTag = "FOR_PUBLISHING" }
    echo "Tagging build with $releaseTag"
    echo "##vso[build.addbuildtag]$releaseTag"
  displayName: "Tagging the build"
  condition: ne(variables['System.TeamProject'], 'public')       