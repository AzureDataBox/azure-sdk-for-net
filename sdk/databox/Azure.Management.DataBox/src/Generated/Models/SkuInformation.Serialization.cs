// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System.Collections.Generic;
using System.Text.Json;
using Azure.Core;

namespace Azure.Management.DataBox.Models
{
    public partial class SkuInformation
    {
        internal static SkuInformation DeserializeSkuInformation(JsonElement element)
        {
            Sku sku = default;
            bool? enabled = default;
            IReadOnlyList<DataLocationToServiceLocationMap> dataLocationToServiceLocationMap = default;
            SkuCapacity capacity = default;
            IReadOnlyList<SkuCost> costs = default;
            IReadOnlyList<string> apiVersions = default;
            SkuDisabledReason? disabledReason = default;
            string disabledReasonMessage = default;
            string requiredFeature = default;
            foreach (var property in element.EnumerateObject())
            {
                if (property.NameEquals("sku"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    sku = Sku.DeserializeSku(property.Value);
                    continue;
                }
                if (property.NameEquals("enabled"))
                {
                    if (property.Value.ValueKind == JsonValueKind.Null)
                    {
                        continue;
                    }
                    enabled = property.Value.GetBoolean();
                    continue;
                }
                if (property.NameEquals("properties"))
                {
                    foreach (var property0 in property.Value.EnumerateObject())
                    {
                        if (property0.NameEquals("dataLocationToServiceLocationMap"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<DataLocationToServiceLocationMap> array = new List<DataLocationToServiceLocationMap>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(Models.DataLocationToServiceLocationMap.DeserializeDataLocationToServiceLocationMap(item));
                                }
                            }
                            dataLocationToServiceLocationMap = array;
                            continue;
                        }
                        if (property0.NameEquals("capacity"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            capacity = SkuCapacity.DeserializeSkuCapacity(property0.Value);
                            continue;
                        }
                        if (property0.NameEquals("costs"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<SkuCost> array = new List<SkuCost>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(SkuCost.DeserializeSkuCost(item));
                                }
                            }
                            costs = array;
                            continue;
                        }
                        if (property0.NameEquals("apiVersions"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            List<string> array = new List<string>();
                            foreach (var item in property0.Value.EnumerateArray())
                            {
                                if (item.ValueKind == JsonValueKind.Null)
                                {
                                    array.Add(null);
                                }
                                else
                                {
                                    array.Add(item.GetString());
                                }
                            }
                            apiVersions = array;
                            continue;
                        }
                        if (property0.NameEquals("disabledReason"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            disabledReason = property0.Value.GetString().ToSkuDisabledReason();
                            continue;
                        }
                        if (property0.NameEquals("disabledReasonMessage"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            disabledReasonMessage = property0.Value.GetString();
                            continue;
                        }
                        if (property0.NameEquals("requiredFeature"))
                        {
                            if (property0.Value.ValueKind == JsonValueKind.Null)
                            {
                                continue;
                            }
                            requiredFeature = property0.Value.GetString();
                            continue;
                        }
                    }
                    continue;
                }
            }
            return new SkuInformation(sku, enabled, dataLocationToServiceLocationMap, capacity, costs, apiVersions, disabledReason, disabledReasonMessage, requiredFeature);
        }
    }
}
