// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;

namespace Azure.Management.DataBox.Models
{
    internal static class CopyStatusExtensions
    {
        public static string ToSerialString(this CopyStatus value) => value switch
        {
            CopyStatus.NotStarted => "NotStarted",
            CopyStatus.InProgress => "InProgress",
            CopyStatus.Completed => "Completed",
            CopyStatus.CompletedWithErrors => "CompletedWithErrors",
            CopyStatus.Failed => "Failed",
            CopyStatus.NotReturned => "NotReturned",
            CopyStatus.HardwareError => "HardwareError",
            CopyStatus.DeviceFormatted => "DeviceFormatted",
            CopyStatus.DeviceMetadataModified => "DeviceMetadataModified",
            CopyStatus.StorageAccountNotAccessible => "StorageAccountNotAccessible",
            CopyStatus.UnsupportedData => "UnsupportedData",
            _ => throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown CopyStatus value.")
        };

        public static CopyStatus ToCopyStatus(this string value)
        {
            if (string.Equals(value, "NotStarted", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.NotStarted;
            if (string.Equals(value, "InProgress", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.InProgress;
            if (string.Equals(value, "Completed", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.Completed;
            if (string.Equals(value, "CompletedWithErrors", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.CompletedWithErrors;
            if (string.Equals(value, "Failed", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.Failed;
            if (string.Equals(value, "NotReturned", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.NotReturned;
            if (string.Equals(value, "HardwareError", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.HardwareError;
            if (string.Equals(value, "DeviceFormatted", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.DeviceFormatted;
            if (string.Equals(value, "DeviceMetadataModified", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.DeviceMetadataModified;
            if (string.Equals(value, "StorageAccountNotAccessible", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.StorageAccountNotAccessible;
            if (string.Equals(value, "UnsupportedData", StringComparison.InvariantCultureIgnoreCase)) return CopyStatus.UnsupportedData;
            throw new ArgumentOutOfRangeException(nameof(value), value, "Unknown CopyStatus value.");
        }
    }
}
