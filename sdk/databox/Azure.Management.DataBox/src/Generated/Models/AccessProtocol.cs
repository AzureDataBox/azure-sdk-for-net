// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.ComponentModel;

namespace Azure.Management.DataBox.Models
{
    /// <summary> The AccessProtocol. </summary>
    public readonly partial struct AccessProtocol : IEquatable<AccessProtocol>
    {
        private readonly string _value;

        /// <summary> Determines if two <see cref="AccessProtocol"/> values are the same. </summary>
        public AccessProtocol(string value)
        {
            _value = value ?? throw new ArgumentNullException(nameof(value));
        }

        private const string SMBValue = "SMB";
        private const string NFSValue = "NFS";

        /// <summary> Server Message Block protocol(SMB). </summary>
        public static AccessProtocol SMB { get; } = new AccessProtocol(SMBValue);
        /// <summary> Network File System protocol(NFS). </summary>
        public static AccessProtocol NFS { get; } = new AccessProtocol(NFSValue);
        /// <summary> Determines if two <see cref="AccessProtocol"/> values are the same. </summary>
        public static bool operator ==(AccessProtocol left, AccessProtocol right) => left.Equals(right);
        /// <summary> Determines if two <see cref="AccessProtocol"/> values are not the same. </summary>
        public static bool operator !=(AccessProtocol left, AccessProtocol right) => !left.Equals(right);
        /// <summary> Converts a string to a <see cref="AccessProtocol"/>. </summary>
        public static implicit operator AccessProtocol(string value) => new AccessProtocol(value);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override bool Equals(object obj) => obj is AccessProtocol other && Equals(other);
        /// <inheritdoc />
        public bool Equals(AccessProtocol other) => string.Equals(_value, other._value, StringComparison.InvariantCultureIgnoreCase);

        /// <inheritdoc />
        [EditorBrowsable(EditorBrowsableState.Never)]
        public override int GetHashCode() => _value?.GetHashCode() ?? 0;
        /// <inheritdoc />
        public override string ToString() => _value;
    }
}
