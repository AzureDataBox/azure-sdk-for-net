// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.DataBox;

namespace Azure.Management.DataBox
{
    /// <summary> DataBox service management client. </summary>
    public class DataBoxManagementClient
    {
        private readonly ClientDiagnostics _clientDiagnostics;
        private readonly HttpPipeline _pipeline;
        private readonly Uri _endpoint;
        private readonly string _subscriptionId;

        /// <summary> Initializes a new instance of DataBoxManagementClient for mocking. </summary>
        protected DataBoxManagementClient()
        {
        }

        /// <summary> Initializes a new instance of DataBoxManagementClient. </summary>
        /// <param name="subscriptionId"> The Subscription Id. </param>
        /// <param name="tokenCredential"> The OAuth token for making client requests. </param>
        /// <param name="options"> The options for configuring the client. </param>
        public DataBoxManagementClient(string subscriptionId, TokenCredential tokenCredential, DataBoxManagementClientOptions options = null) : this(null, subscriptionId, tokenCredential, options)
        {
        }
        /// <summary> Initializes a new instance of DataBoxManagementClient. </summary>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="subscriptionId"> The Subscription Id. </param>
        /// <param name="tokenCredential"> The OAuth token for making client requests. </param>
        /// <param name="options"> The options for configuring the client. </param>
        /// <exception cref="ArgumentNullException"> This occurs when one of the required arguments is null. </exception>
        public DataBoxManagementClient(Uri endpoint, string subscriptionId, TokenCredential tokenCredential, DataBoxManagementClientOptions options = null)
        {
            endpoint ??= new Uri("https://management.azure.com");
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }

            options ??= new DataBoxManagementClientOptions();
            _clientDiagnostics = new ClientDiagnostics(options);
            _pipeline = ManagementPipelineBuilder.Build(tokenCredential, endpoint, options);
            _endpoint = endpoint;
            _subscriptionId = subscriptionId;
        }

        /// <summary> Creates a new instance of OperationsClient. </summary>
        public virtual OperationsClient GetOperationsClient()
        {
            return new OperationsClient(_clientDiagnostics, _pipeline, _endpoint);
        }

        /// <summary> Creates a new instance of JobsClient. </summary>
        public virtual JobsClient GetJobsClient()
        {
            return new JobsClient(_clientDiagnostics, _pipeline, _subscriptionId, _endpoint);
        }

        /// <summary> Creates a new instance of ServiceClient. </summary>
        public virtual ServiceClient GetServiceClient()
        {
            return new ServiceClient(_clientDiagnostics, _pipeline, _subscriptionId, _endpoint);
        }
    }
}
