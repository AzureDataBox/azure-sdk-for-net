// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.

// <auto-generated/>

#nullable disable

using System;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using Azure;
using Azure.Core;
using Azure.Core.Pipeline;
using Azure.Management.DataBox.Models;

namespace Azure.Management.DataBox
{
    internal partial class ServiceRestOperations
    {
        private string subscriptionId;
        private Uri endpoint;
        private string apiVersion;
        private ClientDiagnostics _clientDiagnostics;
        private HttpPipeline _pipeline;

        /// <summary> Initializes a new instance of ServiceRestOperations. </summary>
        /// <param name="clientDiagnostics"> The handler for diagnostic messaging in the client. </param>
        /// <param name="pipeline"> The HTTP pipeline for sending and receiving REST requests and responses. </param>
        /// <param name="subscriptionId"> The Subscription Id. </param>
        /// <param name="endpoint"> server parameter. </param>
        /// <param name="apiVersion"> Api Version. </param>
        /// <exception cref="ArgumentNullException"> This occurs when one of the required arguments is null. </exception>
        public ServiceRestOperations(ClientDiagnostics clientDiagnostics, HttpPipeline pipeline, string subscriptionId, Uri endpoint = null, string apiVersion = "2020-04-01")
        {
            if (subscriptionId == null)
            {
                throw new ArgumentNullException(nameof(subscriptionId));
            }
            endpoint ??= new Uri("https://management.azure.com");
            if (apiVersion == null)
            {
                throw new ArgumentNullException(nameof(apiVersion));
            }

            this.subscriptionId = subscriptionId;
            this.endpoint = endpoint;
            this.apiVersion = apiVersion;
            _clientDiagnostics = clientDiagnostics;
            _pipeline = pipeline;
        }

        internal HttpMessage CreateRegionConfigurationRequest(string location, RegionConfigurationRequest regionConfigurationRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.DataBox/locations/", false);
            uri.AppendPath(location, true);
            uri.AppendPath("/regionConfiguration", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(regionConfigurationRequest);
            request.Content = content;
            return message;
        }

        /// <summary> This API provides configuration details specific to given region/location at Subscription level. </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="regionConfigurationRequest"> Request body to get the configuration for the region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<RegionConfigurationResponse>> RegionConfigurationAsync(string location, RegionConfigurationRequest regionConfigurationRequest, CancellationToken cancellationToken = default)
        {
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (regionConfigurationRequest == null)
            {
                throw new ArgumentNullException(nameof(regionConfigurationRequest));
            }

            using var message = CreateRegionConfigurationRequest(location, regionConfigurationRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RegionConfigurationResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = RegionConfigurationResponse.DeserializeRegionConfigurationResponse(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> This API provides configuration details specific to given region/location at Subscription level. </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="regionConfigurationRequest"> Request body to get the configuration for the region. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<RegionConfigurationResponse> RegionConfiguration(string location, RegionConfigurationRequest regionConfigurationRequest, CancellationToken cancellationToken = default)
        {
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (regionConfigurationRequest == null)
            {
                throw new ArgumentNullException(nameof(regionConfigurationRequest));
            }

            using var message = CreateRegionConfigurationRequest(location, regionConfigurationRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RegionConfigurationResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = RegionConfigurationResponse.DeserializeRegionConfigurationResponse(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateValidateAddressRequest(string location, ValidateAddress validateAddress)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.DataBox/locations/", false);
            uri.AppendPath(location, true);
            uri.AppendPath("/validateAddress", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(validateAddress);
            request.Content = content;
            return message;
        }

        /// <summary> [DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer shipping address and provide alternate addresses if any. </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validateAddress"> Shipping address of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AddressValidationOutput>> ValidateAddressAsync(string location, ValidateAddress validateAddress, CancellationToken cancellationToken = default)
        {
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (validateAddress == null)
            {
                throw new ArgumentNullException(nameof(validateAddress));
            }

            using var message = CreateValidateAddressRequest(location, validateAddress);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AddressValidationOutput value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AddressValidationOutput.DeserializeAddressValidationOutput(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> [DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer shipping address and provide alternate addresses if any. </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validateAddress"> Shipping address of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AddressValidationOutput> ValidateAddress(string location, ValidateAddress validateAddress, CancellationToken cancellationToken = default)
        {
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (validateAddress == null)
            {
                throw new ArgumentNullException(nameof(validateAddress));
            }

            using var message = CreateValidateAddressRequest(location, validateAddress);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AddressValidationOutput value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AddressValidationOutput.DeserializeAddressValidationOutput(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateValidateInputsRequest(string location, ValidationRequest validationRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/providers/Microsoft.DataBox/locations/", false);
            uri.AppendPath(location, true);
            uri.AppendPath("/validateInputs", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(validationRequest);
            request.Content = content;
            return message;
        }

        /// <summary> This method does all necessary pre-job creation validation under subscription. </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validationRequest"> Inputs of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ValidationResponse>> ValidateInputsAsync(string location, ValidationRequest validationRequest, CancellationToken cancellationToken = default)
        {
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (validationRequest == null)
            {
                throw new ArgumentNullException(nameof(validationRequest));
            }

            using var message = CreateValidateInputsRequest(location, validationRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ValidationResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ValidationResponse.DeserializeValidationResponse(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> This method does all necessary pre-job creation validation under subscription. </summary>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validationRequest"> Inputs of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ValidationResponse> ValidateInputs(string location, ValidationRequest validationRequest, CancellationToken cancellationToken = default)
        {
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (validationRequest == null)
            {
                throw new ArgumentNullException(nameof(validationRequest));
            }

            using var message = CreateValidateInputsRequest(location, validationRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ValidationResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ValidationResponse.DeserializeValidationResponse(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListAvailableSkusByResourceGroupRequest(string resourceGroupName, string location, AvailableSkuRequest availableSkuRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DataBox/locations/", false);
            uri.AppendPath(location, true);
            uri.AppendPath("/availableSkus", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(availableSkuRequest);
            request.Content = content;
            return message;
        }

        /// <summary> This method provides the list of available skus for the given subscription, resource group and location. </summary>
        /// <param name="resourceGroupName"> The Resource Group Name. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="availableSkuRequest"> Filters for showing the available skus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AvailableSkusResult>> ListAvailableSkusByResourceGroupAsync(string resourceGroupName, string location, AvailableSkuRequest availableSkuRequest, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (availableSkuRequest == null)
            {
                throw new ArgumentNullException(nameof(availableSkuRequest));
            }

            using var message = CreateListAvailableSkusByResourceGroupRequest(resourceGroupName, location, availableSkuRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AvailableSkusResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AvailableSkusResult.DeserializeAvailableSkusResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> This method provides the list of available skus for the given subscription, resource group and location. </summary>
        /// <param name="resourceGroupName"> The Resource Group Name. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="availableSkuRequest"> Filters for showing the available skus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AvailableSkusResult> ListAvailableSkusByResourceGroup(string resourceGroupName, string location, AvailableSkuRequest availableSkuRequest, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (availableSkuRequest == null)
            {
                throw new ArgumentNullException(nameof(availableSkuRequest));
            }

            using var message = CreateListAvailableSkusByResourceGroupRequest(resourceGroupName, location, availableSkuRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AvailableSkusResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AvailableSkusResult.DeserializeAvailableSkusResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateRegionConfigurationByResourceGroupRequest(string resourceGroupName, string location, RegionConfigurationRequest regionConfigurationRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DataBox/locations/", false);
            uri.AppendPath(location, true);
            uri.AppendPath("/regionConfiguration", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(regionConfigurationRequest);
            request.Content = content;
            return message;
        }

        /// <summary> This API provides configuration details specific to given region/location at Resource group level. </summary>
        /// <param name="resourceGroupName"> The Resource Group Name. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="regionConfigurationRequest"> Request body to get the configuration for the region at resource group level. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<RegionConfigurationResponse>> RegionConfigurationByResourceGroupAsync(string resourceGroupName, string location, RegionConfigurationRequest regionConfigurationRequest, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (regionConfigurationRequest == null)
            {
                throw new ArgumentNullException(nameof(regionConfigurationRequest));
            }

            using var message = CreateRegionConfigurationByResourceGroupRequest(resourceGroupName, location, regionConfigurationRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RegionConfigurationResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = RegionConfigurationResponse.DeserializeRegionConfigurationResponse(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> This API provides configuration details specific to given region/location at Resource group level. </summary>
        /// <param name="resourceGroupName"> The Resource Group Name. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="regionConfigurationRequest"> Request body to get the configuration for the region at resource group level. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<RegionConfigurationResponse> RegionConfigurationByResourceGroup(string resourceGroupName, string location, RegionConfigurationRequest regionConfigurationRequest, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (regionConfigurationRequest == null)
            {
                throw new ArgumentNullException(nameof(regionConfigurationRequest));
            }

            using var message = CreateRegionConfigurationByResourceGroupRequest(resourceGroupName, location, regionConfigurationRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        RegionConfigurationResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = RegionConfigurationResponse.DeserializeRegionConfigurationResponse(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateValidateInputsByResourceGroupRequest(string resourceGroupName, string location, ValidationRequest validationRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Post;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendPath("/subscriptions/", false);
            uri.AppendPath(subscriptionId, true);
            uri.AppendPath("/resourceGroups/", false);
            uri.AppendPath(resourceGroupName, true);
            uri.AppendPath("/providers/Microsoft.DataBox/locations/", false);
            uri.AppendPath(location, true);
            uri.AppendPath("/validateInputs", false);
            uri.AppendQuery("api-version", apiVersion, true);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            var content = new Utf8JsonRequestContent();
            content.JsonWriter.WriteObjectValue(validationRequest);
            request.Content = content;
            return message;
        }

        /// <summary> This method does all necessary pre-job creation validation under resource group. </summary>
        /// <param name="resourceGroupName"> The Resource Group Name. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validationRequest"> Inputs of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<ValidationResponse>> ValidateInputsByResourceGroupAsync(string resourceGroupName, string location, ValidationRequest validationRequest, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (validationRequest == null)
            {
                throw new ArgumentNullException(nameof(validationRequest));
            }

            using var message = CreateValidateInputsByResourceGroupRequest(resourceGroupName, location, validationRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ValidationResponse value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ValidationResponse.DeserializeValidationResponse(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> This method does all necessary pre-job creation validation under resource group. </summary>
        /// <param name="resourceGroupName"> The Resource Group Name. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="validationRequest"> Inputs of the customer. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<ValidationResponse> ValidateInputsByResourceGroup(string resourceGroupName, string location, ValidationRequest validationRequest, CancellationToken cancellationToken = default)
        {
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (validationRequest == null)
            {
                throw new ArgumentNullException(nameof(validationRequest));
            }

            using var message = CreateValidateInputsByResourceGroupRequest(resourceGroupName, location, validationRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        ValidationResponse value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = ValidationResponse.DeserializeValidationResponse(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }

        internal HttpMessage CreateListAvailableSkusByResourceGroupNextPageRequest(string nextLink, string resourceGroupName, string location, AvailableSkuRequest availableSkuRequest)
        {
            var message = _pipeline.CreateMessage();
            var request = message.Request;
            request.Method = RequestMethod.Get;
            var uri = new RawRequestUriBuilder();
            uri.Reset(endpoint);
            uri.AppendRawNextLink(nextLink, false);
            request.Uri = uri;
            request.Headers.Add("Content-Type", "application/json");
            return message;
        }

        /// <summary> This method provides the list of available skus for the given subscription, resource group and location. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> The Resource Group Name. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="availableSkuRequest"> Filters for showing the available skus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public async Task<Response<AvailableSkusResult>> ListAvailableSkusByResourceGroupNextPageAsync(string nextLink, string resourceGroupName, string location, AvailableSkuRequest availableSkuRequest, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (availableSkuRequest == null)
            {
                throw new ArgumentNullException(nameof(availableSkuRequest));
            }

            using var message = CreateListAvailableSkusByResourceGroupNextPageRequest(nextLink, resourceGroupName, location, availableSkuRequest);
            await _pipeline.SendAsync(message, cancellationToken).ConfigureAwait(false);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AvailableSkusResult value = default;
                        using var document = await JsonDocument.ParseAsync(message.Response.ContentStream, default, cancellationToken).ConfigureAwait(false);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AvailableSkusResult.DeserializeAvailableSkusResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw await _clientDiagnostics.CreateRequestFailedExceptionAsync(message.Response).ConfigureAwait(false);
            }
        }

        /// <summary> This method provides the list of available skus for the given subscription, resource group and location. </summary>
        /// <param name="nextLink"> The URL to the next page of results. </param>
        /// <param name="resourceGroupName"> The Resource Group Name. </param>
        /// <param name="location"> The location of the resource. </param>
        /// <param name="availableSkuRequest"> Filters for showing the available skus. </param>
        /// <param name="cancellationToken"> The cancellation token to use. </param>
        public Response<AvailableSkusResult> ListAvailableSkusByResourceGroupNextPage(string nextLink, string resourceGroupName, string location, AvailableSkuRequest availableSkuRequest, CancellationToken cancellationToken = default)
        {
            if (nextLink == null)
            {
                throw new ArgumentNullException(nameof(nextLink));
            }
            if (resourceGroupName == null)
            {
                throw new ArgumentNullException(nameof(resourceGroupName));
            }
            if (location == null)
            {
                throw new ArgumentNullException(nameof(location));
            }
            if (availableSkuRequest == null)
            {
                throw new ArgumentNullException(nameof(availableSkuRequest));
            }

            using var message = CreateListAvailableSkusByResourceGroupNextPageRequest(nextLink, resourceGroupName, location, availableSkuRequest);
            _pipeline.Send(message, cancellationToken);
            switch (message.Response.Status)
            {
                case 200:
                    {
                        AvailableSkusResult value = default;
                        using var document = JsonDocument.Parse(message.Response.ContentStream);
                        if (document.RootElement.ValueKind == JsonValueKind.Null)
                        {
                            value = null;
                        }
                        else
                        {
                            value = AvailableSkusResult.DeserializeAvailableSkusResult(document.RootElement);
                        }
                        return Response.FromValue(value, message.Response);
                    }
                default:
                    throw _clientDiagnostics.CreateRequestFailedException(message.Response);
            }
        }
    }
}
